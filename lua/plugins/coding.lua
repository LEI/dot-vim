-- https://github.com/LazyVim/LazyVim/blob/main/lua/lazyvim/plugins/coding.lua
return {
  -- -- auto pairs
  -- {
  --   'echasnovski/mini.pairs',
  --   event = 'VeryLazy',
  --   config = function()
  --     require('mini.pairs').setup({})
  --   end,
  -- },

  -- -- surround
  -- {
  --   'echasnovski/mini.surround',
  --   keys = { 'gz' },
  --   config = function()
  --     -- use gz mappings instead of s to prevent conflict with leap
  --     require('mini.surround').setup({
  --       mappings = {
  --         add = 'gza', -- Add surrounding in Normal and Visual modes
  --         delete = 'gzd', -- Delete surrounding
  --         find = 'gzf', -- Find surrounding (to the right)
  --         find_left = 'gzF', -- Find surrounding (to the left)
  --         highlight = 'gzh', -- Highlight surrounding
  --         replace = 'gzr', -- Replace surrounding
  --         update_n_lines = 'gzn', -- Update `n_lines`
  --       },
  --     })
  --   end,
  -- },

  -- -- comments
  -- { 'JoosepAlviste/nvim-ts-context-commentstring' },
  -- {
  --   'echasnovski/mini.comment',
  --   event = 'VeryLazy',
  --   config = function()
  --     require('mini.comment').setup({
  --       hooks = {
  --         pre = function()
  --           require('ts_context_commentstring.internal').update_commentstring({})
  --         end,
  --       },
  --     })
  --   end,
  -- },

  -- -- better text-objects
  -- {
  --   'echasnovski/mini.ai',
  --   keys = {
  --     { 'a', mode = { 'x', 'o' } },
  --     { 'i', mode = { 'x', 'o' } },
  --   },
  --   dependencies = {
  --     {
  --       'nvim-treesitter/nvim-treesitter-textobjects',
  --       init = function()
  --         -- no need to load the plugin, since we only need its queries
  --         require('lazy.core.loader').disable_rtp_plugin('nvim-treesitter-textobjects')
  --       end,
  --     },
  --   },
  --   config = function()
  --     local ai = require('mini.ai')
  --     ai.setup({
  --       n_lines = 500,
  --       custom_textobjects = {
  --         o = ai.gen_spec.treesitter({
  --           a = { '@block.outer', '@conditional.outer', '@loop.outer' },
  --           i = { '@block.inner', '@conditional.inner', '@loop.inner' },
  --         }, {}),
  --         f = ai.gen_spec.treesitter({ a = '@function.outer', i = '@function.inner' }, {}),
  --         c = ai.gen_spec.treesitter({ a = '@class.outer', i = '@class.inner' }, {}),
  --       },
  --     })
  --   end,
  -- },
}
